# This is a basic workflow to help you get started with Actions

name: TF-Plan-Helm-Test

# Controls when the workflow will run
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  TF_VERSION: 1.5.0
  HELM_VERSION: 3.12.0

permissions:
  contents: read
  pull-requests: write 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      tf-comment: ${{ steps.tf-comment.outputs.comment-body }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      - name: Setup Terraform 
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: terraform
        continue-on-error: true
      
      - name: Terraform Init
        run: terraform init 
        working-directory: terraform

      - name: Terraform Plan 
        id: plan 
        run: terraform plan -no-color
        working-directory: terraform
        continue-on-error: true

      - name: Output to Job Summary
        if: always()
        run: |
          echo "### Terraform Plan ðŸ“–" >> $GITHUB_STEP_SUMMARY
          echo '```diff' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.plan.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "**Format**: ${{ steps.fmt.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "**Plan**: ${{ steps.plan.outcome }}" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR - Terraform
        uses: actions/github-script@v7
        id: tf-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sha = context.sha;
            const body = `### Terraform Plan ðŸ“–
            \`\`\`diff
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            **Format**: ${{ steps.fmt.outcome }}
            **Plan**: ${{ steps.plan.outcome }}
            `;
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: sha,
              body: body
            });

  helm-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Helm Lint
        id: lint 
        run: helm lint charts/tf-helm

      - name: Helm unit Test (helm-unittest)
        run: |
          helm plugin  install https://github.com/helm-unittest/helm-unittest.git
          helm unittest charts/tf-helm --output-type junit --output-file test-results.xml

      - name: Output to Job Summary
        if: always()
        run: |
          echo "### Terraform Plan ðŸ“–" >> $GITHUB_STEP_SUMMARY
          echo '```diff' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.plan.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo **lint**: ${lint} >> $GITHUB_STEP_SUMMARY
          echo unittest: generated test-results.xml which could be downloaded from Actions Artifacts >> $GITHUB_STEP_SUMMARY

      - name: Comment PR - Helm 
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const sha = context.sha;
            const body = `### Terraform Plan ðŸ“–
            \`\`\`diff
            ${{ steps.plan.outputs.stdout }}
            \`\`\`
            - **lint**: ${lint} 
            - unittest: generated test-results.xml which could be downloaded from Actions Artifacts
            `;
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: sha,
              body: body
            });
